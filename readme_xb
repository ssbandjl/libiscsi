git@github.com:ssbandjl/libiscsi.git


qemu:
static BlockDriver bdrv_iser = {
    .format_name     = "iser",
    .protocol_name   = "iser",
    .instance_size          = sizeof(IscsiLun),
    .bdrv_parse_filename    = iscsi_parse_filename,
    .bdrv_file_open         = iscsi_open,
    .bdrv_close             = iscsi_close,
    .bdrv_co_create_opts    = bdrv_co_create_opts_simple,
    .create_opts            = &bdrv_create_opts_simple,
    .bdrv_reopen_prepare    = iscsi_reopen_prepare,
    .bdrv_reopen_commit     = iscsi_reopen_commit,
    .bdrv_co_invalidate_cache  = iscsi_co_invalidate_cache,
    .bdrv_co_getlength   = iscsi_co_getlength,
    .bdrv_co_get_info    = iscsi_co_get_info,
    .bdrv_co_truncate    = iscsi_co_truncate,
    .bdrv_refresh_limits = iscsi_refresh_limits,
    .bdrv_co_block_status  = iscsi_co_block_status,
    .bdrv_co_pdiscard      = iscsi_co_pdiscard,
    .bdrv_co_copy_range_from = iscsi_co_copy_range_from,
    .bdrv_co_copy_range_to  = iscsi_co_copy_range_to,
    .bdrv_co_pwrite_zeroes = iscsi_co_pwrite_zeroes,
    .bdrv_co_readv         = iscsi_co_readv,
    .bdrv_co_writev        = iscsi_co_writev,
    .bdrv_co_flush_to_disk = iscsi_co_flush,
    .bdrv_aio_ioctl   = iscsi_aio_ioctl,
        acb = qemu_aio_get(&iscsi_aiocb_info, bs, cb, opaque)
        if (req != SG_IO) {
            iscsi_ioctl_handle_emulated(acb, req, buf)
        acb->task = malloc(sizeof(struct scsi_task))
        switch (acb->ioh->dxfer_direction) {
        case SG_DXFER_TO_DEV:
            acb->task->xfer_dir = SCSI_XFER_WRITE;
        case SG_DXFER_FROM_DEV:
            acb->task->xfer_dir = SCSI_XFER_READ;
        default:
            acb->task->xfer_dir = SCSI_XFER_NONE;
        }
        memcpy(&acb->task->cdb[0], acb->ioh->cmdp, acb->ioh->cmd_len)
        if (acb->task->xfer_dir == SCSI_XFER_WRITE)
            scsi_task_set_iov_out(acb->task, (struct scsi_iovec *) acb->ioh->dxferp, acb->ioh->iovec_count)
                task->iovector_out.iov = iov;
                task->iovector_out.niov = niov
        iscsi_scsi_command_async(iscsi, iscsilun->lun, acb->task, iscsi_aio_ioctl_cb, (data.size > 0) ? &data : NULL,acb) -> https://github.com/sahlberg/libiscsi/blob/master/lib/iscsi-command.c
            iscsi_queue_pdu(iscsi, pdu)
                return iscsi->drv->queue_pdu(iscsi, pdu)
        if (acb->task->xfer_dir == SCSI_XFER_READ)
            scsi_task_add_data_in_buffer(acb->task, acb->ioh->dxfer_len, acb->ioh->dxferp)
                scsi_iovector_add(task, &task->iovector_in, len, buf)
                    iovector->iov = scsi_malloc
                    iovector->iov[iovector->niov].iov_len = len;
                    iovector->iov[iovector->niov].iov_base = buf;
                    iovector->niov++;
        iscsi_set_events(iscsilun)
    .bdrv_detach_aio_context = iscsi_detach_aio_context,
    .bdrv_attach_aio_context = iscsi_attach_aio_context,
    .strong_runtime_opts = iscsi_strong_runtime_opts,
};



static iscsi_transport iscsi_transport_iser = {
	.connect      = iscsi_iser_connect,
	.queue_pdu    = iscsi_iser_queue_pdu,
	.new_pdu      = iscsi_iser_new_pdu,
	.disconnect   = iscsi_iser_disconnect,
	.free_pdu     = iscsi_iser_free_pdu,
	.service      = iscsi_iser_service,
	.get_fd       = iscsi_iser_get_fd,
	.which_events = iscsi_iser_which_events,
};

static iscsi_transport iscsi_transport_tcp = {
	.connect      = iscsi_tcp_connect,
	.queue_pdu    = iscsi_tcp_queue_pdu,
        iscsi_add_to_outqueue(iscsi, pdu)
            if (pdu->outdata.data[0] & ISCSI_PDU_IMMEDIATE)
                iscsi_pdu_set_cmdsn(pdu, current->cmdsn)
                iscsi_serial32_compare(pdu->cmdsn, current->cmdsn)
                last->next = pdu
	.new_pdu      = iscsi_tcp_new_pdu,
	.disconnect   = iscsi_tcp_disconnect,
	.free_pdu     = iscsi_tcp_free_pdu,
	.service      = iscsi_tcp_service,
        iscsi_write_to_socket
            pdu->outdata.size = (pdu->outdata.size + 3) & 0xfffffffc
            count = send(iscsi->fd, (void *)(pdu->outdata.data + pdu->outdata_written)
	.get_fd       = iscsi_tcp_get_fd,
	.which_events = iscsi_tcp_which_events,
};



iscsi_service
    iscsi->drv->service(iscsi, revents)